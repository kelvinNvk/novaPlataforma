// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
provider = "prisma-client-js"
}


datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}


// Enums tornam os valores padronizados e seguros
enum CourseLevel {
beginner
intermediate
advanced
}


enum CourseStatus {
draft
published
archived
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  USER
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // relação inversa
  refreshTokens RefreshToken[]
}


model Course {
id Int @id @default(autoincrement())
title String
slug String @unique
description String
language String @default("en")
level CourseLevel @default(beginner)
thumbUrl String?
status CourseStatus @default(published)
lessons Lesson[]
createdAt DateTime @default(now())
}


model Lesson {
id Int @id @default(autoincrement())
courseId Int
title String
order Int
videoProvider String // "youtube" | "vimeo" | "cloudflare" | etc.
videoId String
durationSec Int?
Course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)


@@index([courseId, order])
}

model RefreshToken {
  id              String   @id @default(uuid()) // tem que estar assim
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt       DateTime
  revokedAt       DateTime?
  replacedByTokenId String?
  createdAt       DateTime @default(now())
  @@index([userId])
}
